
# python wrapper for package github.com/recordbase/crecordbase within overall package crecordbase
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -no-make -vm=python3 github.com/recordbase/crecordbase

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _crecordbase
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from crecordbase import crecordbase
# and then refer to everything using crecordbase. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for map map[string]string
class Map_string_string(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_crecordbase.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_crecordbase.IncRef(self.handle)
		else:
			self.handle = _crecordbase.Map_string_string_CTor()
			_crecordbase.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_string.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_crecordbase.Map_string_string_set(self.handle, k, v)
	def __del__(self):
		_crecordbase.DecRef(self.handle)
	def __str__(self):
		s = 'crecordbase.Map_string_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'crecordbase.Map_string_string({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _crecordbase.Map_string_string_len(self.handle)
	def __getitem__(self, key):
		return _crecordbase.Map_string_string_elem(self.handle, key)
	def __setitem__(self, key, value):
		_crecordbase.Map_string_string_set(self.handle, key, value)
	def __delitem__(self, key):
		return _crecordbase.Map_string_string_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_crecordbase.Map_string_string_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _crecordbase.Map_string_string_contains(self.handle, key)


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def Close(instance):
	"""Close(int instance) str"""
	return _crecordbase.crecordbase_Close(instance)
def Connect(commaSeparatedEndpoints, token, withTls, timeoutMillis):
	"""Connect(str commaSeparatedEndpoints, str token, bool withTls, int timeoutMillis) int, str"""
	return _crecordbase.crecordbase_Connect(commaSeparatedEndpoints, token, withTls, timeoutMillis)
def Get(instance, tenant, key, fileContents, timeoutMillis):
	"""Get(int instance, str tenant, str key, bool fileContents, int timeoutMillis) object, str"""
	return Map_string_string(handle=_crecordbase.crecordbase_Get(instance, tenant, key, fileContents, timeoutMillis))


